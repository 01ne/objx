/*
	{4} ({1} and []{1})
	--------------------------------------------------
*/

// {4} gets the value as a {1}, returns the optionalDefault
// value or a system default object if the value is the wrong type.
func (o *O) {4}(optionalDefault ...{1}) {1} {
	if s, ok := o.obj.({1}); ok {
		return s
	}
	if len(optionalDefault) == 1 {
		return optionalDefault[0]
	}
	return {3}
}

// Must{4} gets the value as a {1}.
//
// Panics if the object is not a {1}.
func (o *O) Must{4}() {1} {
	return o.obj.({1})
}

// {4}Slice gets the value as a []{1}, returns the optionalDefault
// value or nil if the value is not a []{1}.
func (o *O) {4}Slice(optionalDefault ...[]{1}) []{1} {
	if s, ok := o.obj.([]{1}); ok {
		return s
	}
	if len(optionalDefault) == 1 {
		return optionalDefault[0]
	}
	return nil
}

// Must{4}Slice gets the value as a []{1}.
//
// Panics if the object is not a []{1}.
func (o *O) Must{4}Slice() []{1} {
	return o.obj.([]{1})
}

// Is{4} gets whether the object contained is a {1} or not.
func (o *O) Is{4}() bool {
	return o.IsKind(reflect.{0})
}

// Is{4}Slice gets whether the object contained is a []{1} or not.
func (o *O) Is{4}Slice() bool {
	if !o.IsSlice() {
		return false
	}
	_, ok := o.obj.([]{1})
	return ok
}


// TESTS:

func Test{4}(t *testing.T) {

	m := map[string]interface{}{"value": {1}( {2} ), "nothing": nil}
	assert.Equal(t, {1}({2}), New(m).Get("value").{4}())
	assert.Equal(t, {1}({2}), New(m).Get("value").Must{4}())
	assert.Equal(t, {1}({3}), New(m).Get("nothing").{4}())
	assert.Equal(t, {1}({2}), New(m).Get("nothing").{4}({2}))

	assert.Panics(t, func() {
		New(m).Get("age").Must{4}()
	})

}

func Test{4}Slice(t *testing.T) {

	m := map[string]interface{}{"value": []{1}{ {1}({2}) }, "nothing": nil}
	assert.Equal(t, {1}({2}), New(m).Get("value").{4}Slice()[0])
	assert.Equal(t, {1}({2}), New(m).Get("value").Must{4}Slice()[0])
	assert.Equal(t, []{1}(nil), New(m).Get("nothing").{4}Slice())
	assert.Equal(t, {1}({2}), New(m).Get("nothing").{4}Slice( []{1}{ {1}({2}) } )[0])

	assert.Panics(t, func() {
		New(m).Get("nothing").Must{4}Slice()
	})

}

func TestIs{4}(t *testing.T) {

	var o *O

	o = New({1}({2}))
	assert.True(t, o.Is{4}())

	o = New([]{1}{ {1}({2}) })
	assert.True(t, o.Is{4}Slice())

}
